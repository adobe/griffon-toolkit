/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

import * as kit from '@adobe/griffon-toolkit';
import schema from '../schemas/mediaSessionCreated.json';

/**
 * Contains constants and functions for a Media Session Created Event.
 *
 * The structure for a Media Session Created Event is as follows:
 * ```
 * {
 *   payload: {
 *     ACPExtensionEventData: {
 *       mediaservice.sessionid: <string>,
 *       sessionid: <string>,
 *     },
 *     ACPExtensionEventSource: 'com.adobe.eventsource.media.sessioncreated'
 *     ACPExtensionEventType: 'com.adobe.eventtype.media'
 *     ACPExtensionEventName: <string>,
 *     ACPExtensionEventNumber: <integer>,
 *     ACPExtensionEventUniqueIdentifier: <string>,
 *   },
 *   type: 'generic'
 *   vendor: <string>,
 *   annotations: <array>,
 *   clientId: <string>,
 *   timestamp: <number>,
 *   uuid: <string>,
 * }
 * ```
 *
 * @namespace mediaSessionCreated
 */

/**
 * Paths for the keys on a Media Session Created Event
 *
 * @enum {string}
 */
const path = {
  /** An object with custom data describing the event.<br />Path is `payload`. */
  payload: 'payload',

  /** An object with the custom data describing the event.<br />Path is `payload.ACPExtensionEventData`. */
  eventData: 'payload.ACPExtensionEventData',

  /** The media sessionid returned by collection service.<br />Path is `payload.ACPExtensionEventData."mediaservice.sessionid"`. */
  mediaServiceSessionId: 'payload.ACPExtensionEventData."mediaservice.sessionid"',

  /** The unique session ID.<br />Path is `payload.ACPExtensionEventData.sessionid`. */
  sessionId: 'payload.ACPExtensionEventData.sessionid',

  /** The event source.<br />Path is `payload.ACPExtensionEventSource`. */
  eventSource: 'payload.ACPExtensionEventSource',

  /** The event type.<br />Path is `payload.ACPExtensionEventType`. */
  eventType: 'payload.ACPExtensionEventType',

  /** The name of the event.<br />Path is `payload.ACPExtensionEventName`. */
  eventName: 'payload.ACPExtensionEventName',

  /** The event number generated by the SDK.<br />Path is `payload.ACPExtensionEventNumber`. */
  sdkEventNumber: 'payload.ACPExtensionEventNumber',

  /** The unique event id.<br />Path is `payload.ACPExtensionEventUniqueIdentifier`. */
  eventId: 'payload.ACPExtensionEventUniqueIdentifier',

  /** The type of event.<br />Path is `type`. */
  rootType: 'type',

  /** The vendor of the plugin that sent the event.<br />Path is `vendor`. */
  vendor: 'vendor',

  /** Array of Annotation objects.<br />Path is `annotations`. */
  annotations: 'annotations',

  /** A unique id that differentiates clients from one another.<br />Path is `clientId`. */
  clientId: 'clientId',

  /** When the event occurred.<br />Path is `timestamp`. */
  timestamp: 'timestamp',

  /** Uniquely identifies each event.<br />Path is `uuid`. */
  rootId: 'uuid'
};

/**
 * Describes the number of parents this object has based off schema references. When checking for matches for example, we want to
 * use a schema that is more specific over a more generic schema
 *
 * @constant
 */
const parentDepth = 2;

/**
 * A label that can be used when describing this object
 */
const label = 'Media Session Created Event';

/**
 * A grouping for this object
 */
const group = 'event';

/**
 * The value for `eventSource` for a Media Session Created Event.
 *
 * Path is `payload,ACPExtensionEventSource`.
 *
 * @constant
 */
const EVENT_SOURCE = 'com.adobe.eventsource.media.sessioncreated';

/**
 * The value for `eventType` for a Media Session Created Event.
 *
 * Path is `payload,ACPExtensionEventType`.
 *
 * @constant
 */
const EVENT_TYPE = 'com.adobe.eventtype.media';

/**
 * The value for `rootType` for a Media Session Created Event.
 *
 * Path is `type`.
 *
 * @constant
 */
const ROOT_TYPE = 'generic';

/**
 * Retrieves a value from the object. You can provide either a path or an alias.
 *
 * @function
 * @param {string} alias Path or alias
 * @param {*} data Data to search
 * @returns {*}
 */
const get = (alias, data) => {
  const func = (data2) => kit.search(path[alias] || alias, data2);
  if (!data) { return func; }
  return func(data);
};

/**
 * Returns the `mediaServiceSessionId` from the Media Session Created Event.
 * This is the the media sessionid returned by collection service.
 *
 * Path is `payload,ACPExtensionEventData,mediaservice.sessionid`.
 *
 * @function
 * @param {object} source The Media Session Created Event instance
 * @returns {string}
 */
const getMediaServiceSessionId = kit.search(path.mediaServiceSessionId);

/**
 * Returns the `sessionId` from the Media Session Created Event.
 * This is the the unique session ID.
 *
 * Path is `payload,ACPExtensionEventData,sessionid`.
 *
 * @function
 * @param {object} source The Media Session Created Event instance
 * @returns {string}
 */
const getSessionId = kit.search(path.sessionId);

/**
 * Matcher can be used to find matching Media Session Created Event objects.
 *
 * @see kit.match
 * @constant
 */
const matcher = kit.combineAll([
  'payload.ACPExtensionEventSource==`com.adobe.eventsource.media.sessioncreated`',
  'payload.ACPExtensionEventType==`com.adobe.eventtype.media`',
  'timestamp'
]);

/**
 * Tests the provided source against the matcher to see if it's Media Session Created Event event.
 *
 * @function
 * @param {object} source The Media Session Created Event instance
 * @returns {boolean}
 * @see kit.isMatch
 */
const isMatch = (source) => kit.isMatch(matcher, source);
/**
 * Generates a Media Session Created Event with the const values set.
 * Can be useful in testing.
 * Can provide additional data by providing a flat object of paths and values.
 *
 * @function
 * @param {...Function} input Overrides
 * @returns {object}
 */
const make = (input) => kit.expandWithPaths(path, {
  eventSource: 'com.adobe.eventsource.media.sessioncreated',
  eventType: 'com.adobe.eventtype.media',
  rootType: 'generic',
  ...input
});

/**
 * Generates a Media Session Created Event with some default values set.
 * Can be useful in testing.
 * Can override defaults and provide additional data by providing a flat object
 * of paths and values.
 *
 * @function
 * @param {...Function} input Overrides
 * @returns {object}
 */
const mock = (input) => kit.expandWithPaths(path, {
  mediaServiceSessionId: 'mediaserviceSessionid123',
  sessionId: 'sessionid123',
  eventSource: 'com.adobe.eventsource.media.sessioncreated',
  eventType: 'com.adobe.eventtype.media',
  rootType: 'generic',
  vendor: 'com.adobe.mobile.sdk',
  clientId: 'appleABC',
  timestamp: Date.parse('12 Jan 2020 07:23:17 GMT'),
  rootId: '123',
  ...input
});

/* ADD CUSTOM CONTENT BELOW */

// additional exports should be added here:
const customExports = {};

/* END CUSTOM CONTENT */
/* The content below is autogenerated. Do not make any changes */

export default {
  path,
  mock,
  make,
  schema,
  get,
  ...customExports,
  getMediaServiceSessionId,
  getSessionId,
  isMatch,
  matcher,
  EVENT_SOURCE,
  EVENT_TYPE,
  ROOT_TYPE,
  label,
  group,
  parentDepth
};
