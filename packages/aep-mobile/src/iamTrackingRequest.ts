/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

import * as kit from '@adobe/griffon-toolkit';
import schema from '../schemas/iamTrackingRequest.json';

/**
 * Contains constants and functions for a IAM Tracking Request.
 *
 * The structure for a IAM Tracking Request is as follows:
 * ```
 * {
 *   payload: {
 *     ACPExtensionEventData: {
 *       iam: {
 *         action: <string>,
 *         eventType: <string>,
 *       },
 *       xdm: {
 *         _experience: {
 *           decisioning: {
 *             propositionEventType: <object>,
 *             propositions: <array>,
 *           },
 *         },
 *       },
 *       datasetId: <string>,
 *       query: <object>,
 *     },
 *     ACPExtensionEventSource: 'com.adobe.eventSource.requestContent'
 *     ACPExtensionEventType: 'com.adobe.eventType.edge'
 *     ACPExtensionEventName: <string>,
 *     ACPExtensionEventNumber: <integer>,
 *     ACPExtensionEventUniqueIdentifier: <string>,
 *   },
 *   vendor: 'com.adobe.griffon.mobile'
 *   type: 'generic'
 *   annotations: <array>,
 *   clientId: <string>,
 *   timestamp: <number>,
 *   uuid: <string>,
 * }
 * ```
 *
 * @namespace iamTrackingRequest
 */

/**
 * Paths for the keys on a IAM Tracking Request
 *
 * @enum {string}
 */
const path = {
  /** An object with custom data describing the event.<br />Path is `payload`. */
  payload: 'payload',

  /** An object with the custom data describing the event.<br />Path is `payload.ACPExtensionEventData`. */
  eventData: 'payload.ACPExtensionEventData',

  /** IAM Payload.<br />Path is `payload.ACPExtensionEventData.iam`. */
  iam: 'payload.ACPExtensionEventData.iam',

  /** Action associated with interaction.<br />Path is `payload.ACPExtensionEventData.iam.action`. */
  interactionAction: 'payload.ACPExtensionEventData.iam.action',

  /** The type of interaction triggered.<br />Path is `payload.ACPExtensionEventData.iam.eventType`. */
  interactionType: 'payload.ACPExtensionEventData.iam.eventType',

  /** The XDM data send to the server.<br />Path is `payload.ACPExtensionEventData.xdm`. */
  xdm: 'payload.ACPExtensionEventData.xdm',

  _experience: 'payload.ACPExtensionEventData.xdm._experience',

  decisioning: 'payload.ACPExtensionEventData.xdm._experience.decisioning',

  propositionEventType: 'payload.ACPExtensionEventData.xdm._experience.decisioning.propositionEventType',

  propositions: 'payload.ACPExtensionEventData.xdm._experience.decisioning.propositions',

  /** The dataset to apply the XDM data to.<br />Path is `payload.ACPExtensionEventData.datasetId`. */
  datasetId: 'payload.ACPExtensionEventData.datasetId',

  /** Data to request from the edge.<br />Path is `payload.ACPExtensionEventData.query`. */
  query: 'payload.ACPExtensionEventData.query',

  /** The event source.<br />Path is `payload.ACPExtensionEventSource`. */
  eventSource: 'payload.ACPExtensionEventSource',

  /** The event type.<br />Path is `payload.ACPExtensionEventType`. */
  eventType: 'payload.ACPExtensionEventType',

  /** The name of the event.<br />Path is `payload.ACPExtensionEventName`. */
  eventName: 'payload.ACPExtensionEventName',

  /** The event number generated by the SDK.<br />Path is `payload.ACPExtensionEventNumber`. */
  sdkEventNumber: 'payload.ACPExtensionEventNumber',

  /** The unique event id.<br />Path is `payload.ACPExtensionEventUniqueIdentifier`. */
  eventId: 'payload.ACPExtensionEventUniqueIdentifier',

  /** The vendor of the plugin that sent the event.<br />Path is `vendor`. */
  vendor: 'vendor',

  /** The type of event.<br />Path is `type`. */
  rootType: 'type',

  /** Array of Annotation objects.<br />Path is `annotations`. */
  annotations: 'annotations',

  /** A unique id that differentiates clients from one another.<br />Path is `clientId`. */
  clientId: 'clientId',

  /** When the event occurred.<br />Path is `timestamp`. */
  timestamp: 'timestamp',

  /** Uniquely identifies each event.<br />Path is `uuid`. */
  rootId: 'uuid'
};

/**
 * Describes the number of parents this object has based off schema references. When checking for matches for example, we want to
 * use a schema that is more specific over a more generic schema
 *
 * @constant
 */
const parentDepth = 3;

/**
 * The name of this event. Same as the file name
 */
const uniqueName = 'iamTrackingRequest';

/**
 * The package of this event
 */
const packageName = 'aep-mobile';

/**
 * The unique name of this event
 */
const label = 'IAM Tracking Request';

/**
 * A grouping for this object
 */
const group = 'event';

/**
 * The value for `eventSource` for a IAM Tracking Request.
 *
 * Path is `payload,ACPExtensionEventSource`.
 *
 * @constant
 */
const EVENT_SOURCE = 'com.adobe.eventSource.requestContent';

/**
 * The value for `eventType` for a IAM Tracking Request.
 *
 * Path is `payload,ACPExtensionEventType`.
 *
 * @constant
 */
const EVENT_TYPE = 'com.adobe.eventType.edge';

/**
 * The value for `vendor` for a IAM Tracking Request.
 *
 * Path is `vendor`.
 *
 * @constant
 */
const VENDOR = 'com.adobe.griffon.mobile';

/**
 * The value for `rootType` for a IAM Tracking Request.
 *
 * Path is `type`.
 *
 * @constant
 */
const ROOT_TYPE = 'generic';

/**
 * Retrieves a value from the object. You can provide either a path or an alias.
 *
 * @function
 * @param {string} alias Path or alias
 * @param {*} data Data to search
 * @returns {*}
 */
const get = (alias, data) => {
  const func = (data2) => kit.search(path[alias] || alias, data2);
  if (!data) { return func; }
  return func(data);
};

/**
 * Returns the `iam` from the IAM Tracking Request.
 * This is the iAM Payload.
 *
 * Path is `payload,ACPExtensionEventData,iam`.
 *
 * @function
 * @param {object} source The IAM Tracking Request instance
 * @returns {object}
 */
const getIam = kit.search(path.iam);

/**
 * Returns the data using the specified path from the iam
 * of the IAM Tracking Request.
 *
 * @function
 * @param {...string} path key in object
 * @param {object} source The IAM Tracking Request instance
 * @returns {*}
 */
const getIamKey = kit.curry(
  (searchPath, source) => kit.search(`${path.iam}.${searchPath}`, source)
);

/**
 * Returns the `interactionAction` from the IAM Tracking Request.
 * This is the action associated with interaction.
 *
 * Path is `payload,ACPExtensionEventData,iam,action`.
 *
 * @function
 * @param {object} source The IAM Tracking Request instance
 * @returns {string}
 */
const getInteractionAction = kit.search(path.interactionAction);

/**
 * Returns the `interactionType` from the IAM Tracking Request.
 * This is the the type of interaction triggered.
 *
 * Path is `payload,ACPExtensionEventData,iam,eventType`.
 *
 * @function
 * @param {object} source The IAM Tracking Request instance
 * @returns {string}
 */
const getInteractionType = kit.search(path.interactionType);

/**
 * Returns the `_experience` from the IAM Tracking Request.
 * This is the .
 *
 * Path is `payload,ACPExtensionEventData,xdm,_experience`.
 *
 * @function
 * @param {object} source The IAM Tracking Request instance
 * @returns {object}
 */
const get_experience = kit.search(path._experience);

/**
 * Returns the data using the specified path from the _experience
 * of the IAM Tracking Request.
 *
 * @function
 * @param {...string} path key in object
 * @param {object} source The IAM Tracking Request instance
 * @returns {*}
 */
const get_experienceKey = kit.curry(
  (searchPath, source) => kit.search(`${path._experience}.${searchPath}`, source)
);

/**
 * Returns the `decisioning` from the IAM Tracking Request.
 * This is the .
 *
 * Path is `payload,ACPExtensionEventData,xdm,_experience,decisioning`.
 *
 * @function
 * @param {object} source The IAM Tracking Request instance
 * @returns {object}
 */
const getDecisioning = kit.search(path.decisioning);

/**
 * Returns the data using the specified path from the decisioning
 * of the IAM Tracking Request.
 *
 * @function
 * @param {...string} path key in object
 * @param {object} source The IAM Tracking Request instance
 * @returns {*}
 */
const getDecisioningKey = kit.curry(
  (searchPath, source) => kit.search(`${path.decisioning}.${searchPath}`, source)
);

/**
 * Returns the `propositionEventType` from the IAM Tracking Request.
 * This is the .
 *
 * Path is `payload,ACPExtensionEventData,xdm,_experience,decisioning,propositionEventType`.
 *
 * @function
 * @param {object} source The IAM Tracking Request instance
 * @returns {object}
 */
const getPropositionEventType = kit.search(path.propositionEventType);

/**
 * Returns the data using the specified path from the propositionEventType
 * of the IAM Tracking Request.
 *
 * @function
 * @param {...string} path key in object
 * @param {object} source The IAM Tracking Request instance
 * @returns {*}
 */
const getPropositionEventTypeKey = kit.curry(
  (searchPath, source) => kit.search(`${path.propositionEventType}.${searchPath}`, source)
);

/**
 * Returns the `propositions` from the IAM Tracking Request.
 * This is the .
 *
 * Path is `payload,ACPExtensionEventData,xdm,_experience,decisioning,propositions`.
 *
 * @function
 * @param {object} source The IAM Tracking Request instance
 * @returns {Array}
 */
const getPropositions = kit.search(path.propositions);

/**
 * Matcher can be used to find matching IAM Tracking Request objects.
 *
 * @see kit.match
 * @constant
 */
const matcher = kit.combineAll([
  'payload.ACPExtensionEventData.iam.eventType',
  kit.combineAny([
    'payload.ACPExtensionEventSource==`com.adobe.eventSource.requestContent`',
    'payload.ACPExtensionEventSource==`com.adobe.eventsource.requestcontent`'
  ]),
  kit.combineAny([
    'payload.ACPExtensionEventType==`com.adobe.eventType.edge`',
    'payload.ACPExtensionEventType==`com.adobe.eventtype.edge`'
  ]),
  'vendor==`com.adobe.griffon.mobile`',
  'timestamp'
]);

/**
 * Tests the provided source against the matcher to see if it's IAM Tracking Request event.
 *
 * @function
 * @param {object} source The IAM Tracking Request instance
 * @returns {boolean}
 * @see kit.isMatch
 */
const isMatch = (source) => kit.isMatch(matcher, source);
/**
 * Generates a IAM Tracking Request with the const values set.
 * Can be useful in testing.
 * Can provide additional data by providing a flat object of paths and values.
 *
 * @function
 * @param {...Function} input Overrides
 * @returns {object}
 */
const make = (input) => kit.expandWithPaths(path, {
  eventSource: 'com.adobe.eventSource.requestContent',
  eventType: 'com.adobe.eventType.edge',
  vendor: 'com.adobe.griffon.mobile',
  rootType: 'generic',
  ...input
});

/**
 * Generates a IAM Tracking Request with some default values set.
 * Can be useful in testing.
 * Can override defaults and provide additional data by providing a flat object
 * of paths and values.
 *
 * @function
 * @param {...Function} input Overrides
 * @returns {object}
 */
const mock = (input) => kit.expandWithPaths(path, {
  interactionType: 'trigger',
  xdm: { eventType: 'commerce.purchases' },
  datasetId: 'abcdefg',
  eventSource: 'com.adobe.eventSource.requestContent',
  eventType: 'com.adobe.eventType.edge',
  vendor: 'com.adobe.griffon.mobile',
  rootType: 'generic',
  clientId: 'appleABC',
  timestamp: Date.parse('12 Jan 2020 07:23:17 GMT'),
  rootId: '123',
  ...input
});

/* ADD CUSTOM CONTENT BELOW */

// additional exports should be added here:
const customExports = {};

/* END CUSTOM CONTENT */
/* The content below is autogenerated. Do not make any changes */

export default {
  path,
  mock,
  make,
  schema,
  get,
  ...customExports,
  getIam,
  getIamKey,
  getInteractionAction,
  getInteractionType,
  get_experience,
  get_experienceKey,
  getDecisioning,
  getDecisioningKey,
  getPropositionEventType,
  getPropositionEventTypeKey,
  getPropositions,
  isMatch,
  matcher,
  EVENT_SOURCE,
  EVENT_TYPE,
  VENDOR,
  ROOT_TYPE,
  label,
  group,
  parentDepth,
  uniqueName,
  packageName
};
