
/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

import kit from './kit';
import schema from '../schemas/event.json';

/**
 * Contains constants and functions for a Root Griffon Event.
 *
 * The structure for a Root Griffon Event is as follows:
 * ```
 * {
 *   annotations: <array>,
 *   clientId: <string>,
 *   payload: <object>,
 *   timestamp: <number>,
 *   type: <enum(blob, control, generic, log, status)>,
 *   uuid: <string>,
 * }
 * ```
 *
 * @namespace event
 */

/* ADD CUSTOM CONTENT BELOW */

// additional exports should be added here:
const customExports = {};

/* END CUSTOM CONTENT */
/* The content below is autogenerated. Do not make any changes */

/**
 * Paths for the keys on a Root Griffon Event
 *
 * @enum {string}
 */
const path = {
  /** Array of {@link Annotation} objects.<br />Path is `annotations`. */
  annotations: 'annotations',

  /** A unique id that differentiates clients from one another.<br />Path is `clientId`. */
  clientId: 'clientId',

  /** An object with custom data describing the event.<br />Path is `payload`. */
  payload: 'payload',

  /** When the event occurred.<br />Path is `timestamp`. */
  timestamp: 'timestamp',

  /** The type of event.<br />Path is `type`. */
  rootType: 'type',

  /** Uniquely identifies each event.<br />Path is `uuid`. */
  rootId: 'uuid'
};


/**
 * Returns the `annotations` from the Root Griffon Event.
 * This is the array of {@link Annotation} objects.
 *
 * Path is `annotations`.
 *
 * @function
 * @param {object} source The Root Griffon Event instance
 * @returns {Array}
 */
const getAnnotations = kit.search(path.annotations);

/**
 * Returns the `clientId` from the Root Griffon Event.
 * This is the a unique id that differentiates clients from one another.
 *
 * Path is `clientId`.
 *
 * @function
 * @param {object} source The Root Griffon Event instance
 * @returns {string}
 */
const getClientId = kit.search(path.clientId);

/**
 * Returns the `payload` from the Root Griffon Event.
 * This is the an object with custom data describing the event.
 *
 * Path is `payload`.
 *
 * @function
 * @param {object} source The Root Griffon Event instance
 * @returns {object}
 */
const getPayload = kit.search(path.payload);

/**
 * Returns the data using the specified path from the payload
 * of the Root Griffon Event.
 *
 * @function
 * @param {...string} path key in object
 * @param {object} source The Root Griffon Event instance
 * @returns {*}
 */
const getPayloadKey = kit.curry(
  (searchPath, source) => kit.search(`${path.payload}.${searchPath}`, source)
);

/**
 * Returns the `timestamp` from the Root Griffon Event.
 * This is the when the event occurred.
 *
 * Path is `timestamp`.
 *
 * @function
 * @param {object} source The Root Griffon Event instance
 * @returns {number}
 */
const getTimestamp = kit.search(path.timestamp);

/**
 * Returns the `rootType` from the Root Griffon Event.
 * This is the the type of event.
 *
 * Path is `type`.
 *
 * @function
 * @param {object} source The Root Griffon Event instance
 * @returns {string}
 */
const getRootType = kit.search(path.rootType);

/**
 * Returns the `rootId` from the Root Griffon Event.
 * This is the uniquely identifies each event.
 *
 * Path is `uuid`.
 *
 * @function
 * @param {object} source The Root Griffon Event instance
 * @returns {string}
 */
const getRootId = kit.search(path.rootId);


/**
 * Generates a Root Griffon Event with some default values set.
 * Can be useful in testing.
 * Can override defaults and provide additional data by providing a flat object
 * of paths and values.
 *
 * @function
 * @param {...Function} input Overrides
 * @returns {object}
 */
const mock = (input) => kit.expand({
  clientId: 'appleABC',
  timestamp: Date.parse('12 Jan 2020 07:23:17 GMT'),
  type: 'generic',
  uuid: '123',
  ...input
});

/**
 * Validates the Root Griffon Event against the json schema
 *
 * @function
 * @param {object} source The Root Griffon Event
 * @returns {boolean}
 */
const validate = kit.validateSchema(schema);

export default {
  path,
  mock,
  schema,
  validate,
  ...customExports,
  getAnnotations,
  getClientId,
  getPayload,
  getPayloadKey,
  getTimestamp,
  getRootType,
  getRootId
};
