
/*
Copyright 2020 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

import kit from './kit';
import schema from '../schemas/logEvent.json';

/**
 * Contains constants and functions for a Log Event.
 *
 * The structure for a Log Event is as follows:
 * ```
 * {
 *   type: 'log'
 *   annotations: <array>,
 *   clientId: <string>,
 *   payload: <object>,
 *   timestamp: <number>,
 *   uuid: <string>,
 * }
 * ```
 *
 * @namespace logEvent
 */

/* ADD CUSTOM CONTENT BELOW */

// additional exports should be added here:
const customExports = {};

/* END CUSTOM CONTENT */
/* The content below is autogenerated. Do not make any changes */

/**
 * Paths for the keys on a Log Event
 *
 * @enum {string}
 */
const path = {
  /** The type of event.<br />Path is `type`. */
  rootType: 'type',

  /** Array of {@link Annotation} objects.<br />Path is `annotations`. */
  annotations: 'annotations',

  /** A unique id that differentiates clients from one another.<br />Path is `clientId`. */
  clientId: 'clientId',

  /** An object with custom data describing the event.<br />Path is `payload`. */
  payload: 'payload',

  /** When the event occurred.<br />Path is `timestamp`. */
  timestamp: 'timestamp',

  /** Uniquely identifies each event.<br />Path is `uuid`. */
  rootId: 'uuid'
};

/**
 * The value for `rootType` for a Log Event.
 *
 * Path is `type`.
 *
 * @constant
 */
const ROOT_TYPE = 'log';


/**
 * Returns the `type` from the Log Event.
 * This is the .
 *
 * Path is `type`.
 *
 * @function
 * @param {object} source The Log Event instance
 * @returns {undefined}
 */
const getType = kit.search(path.type);

/**
 * Matcher can be used to find matching Log Event objects.
 *
 * @see kit.match
 * @constant
 */
const matcher = kit.combineAll([
  'type==\'log\''
]);

/**
 * Tests the provided source against the matcher to see if it's Log Event event.
 *
 * @function
 * @param {object} source The Log Event instance
 * @returns {boolean}
 * @see kit.isMatch
 */
const isMatch = (source) => kit.isMatch(matcher, source);

/**
 * Generates a Log Event with some default values set.
 * Can be useful in testing.
 * Can override defaults and provide additional data by providing a flat object
 * of paths and values.
 *
 * @function
 * @param {...Function} input Overrides
 * @returns {object}
 */
const mock = (input) => kit.expand({
  type: 'generic',
  clientId: 'appleABC',
  timestamp: Date.parse('12 Jan 2020 07:23:17 GMT'),
  uuid: '123',
  ...input
});

/**
 * Validates the Log Event against the json schema
 *
 * @function
 * @param {object} source The Log Event
 * @returns {boolean}
 */
const validate = kit.validateSchema(schema);

export default {
  path,
  mock,
  schema,
  validate,
  ...customExports,
  getType,
  isMatch,
  matcher,
  ROOT_TYPE
};
